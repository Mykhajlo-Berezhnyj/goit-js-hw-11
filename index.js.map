{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/refs.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://pixabay.com/api/';\nconst myApiKey = '49272526-e1b2de60044cea6af49c76424';\n\nexport const fetchImages = (query, page = 1) => {\n    return axios.get('', {\n        params: {\n            key: myApiKey,\n            q: query,\n            image_type: 'photo',\n            orientation: 'horizontal',\n            safesearch: true,\n            per_page: 21,\n            page,\n        },\n    })\n        .then(response => {\n            return response.data.hits.map(image => ({\n                webUrl: image.webformatURL,\n                imgUrl: image.largeImageURL,\n                alt: image.tags,\n                likes: image.likes,\n                views: image.views,\n                comments: image.comments,\n                downloads: image.downloads\n            }));\n        })\n        \n        .catch(error => {\n            console.error('Error fetchImages:', error);\n            throw error;\n        });\n};","\nexport const refs = {\n    form: document.querySelector('.form'),\n    inputQuery: document.querySelector('input[type=\"text\"]'),\n    btnSearch: document.querySelector('.btn-search'),\n    gallery: document.querySelector('.gallery')\n}","import SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport { refs } from \"./refs\";\n\nexport const renderImages = (images) => {\n    const gallery = refs.gallery;\n    gallery.innerHTML = images.map(image =>\n         ` <li class=\"gallery-item\">\n          <a class=\"galery-link\" href=\"${image.webUrl}\"> <img src=\"${image.imgUrl}\" alt=\"${image.alt}\" /></a>\n          <table>\n           <table>\n            <tr>\n              <th>Likes</th> \n              <th>Views</th>\n              <th>Comments</th>\n              <th>Downloads</th>\n            </tr>\n            <tr>\n             <td>${image.likes}</td>\n             <td>${image.views}</td>\n             <td>${image.comments}</td>\n             <td>${image.downloads}</td>\n            </tr>\n          </table>\n        </li>`\n    ).join('');    \n   \nconst lightbox = new SimpleLightbox('.gallery a', {\n    captionData: 'alt',\n    captionDelay: 250,\n});\nlightbox.refresh();\n};","import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport { fetchImages } from \"./js/pixabay-api\";\nimport { refs } from \"./js/refs\";\nimport { renderImages } from \"./js/render-functions\";\n\nlet page = 1;\nlet isLoading = false;\nrefs.form.addEventListener('submit', (event) => {\n    event.preventDefault();\n    const query = refs.inputQuery.value.trim();\n    if (query) {\n        page = 1;\n        refs.gallery.innerHTML = '';\n        loadImages(query);\n    }\n});\n\nconst loadImages = (query) => {\n    if (isLoading) {\n        return;\n    }\n    isLoading = true\n    fetchImages(query, page)\n        .then(images => {\n            if (images.length === 0) {\n                iziToast.show({\n                    title: 'Warning!',\n                    message: ' Sorry, there are no images matching your search query.Please try again!',\n                    titleColor: '#FFFFFF',\n                    messageColor: '#FFFFFF',\n                    position: 'topRight',\n                    backgroundColor: '#EF4040',\n                    position: 'topRight',\n                });\n            } else {\n                renderImages(images);\n                page += 1;\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error)\n        })\n        .finally(() => {\n            isLoading = false;\n        });\n};\nconst loadScroll = () => {\n    const scrollPosition = window.scrollY + window.innerHeight;\n    const pageHeight = documentElement.scrollHeight;\n    if (scrollPosition >= pageHeight - 200) {\n        const query = refs.inputQuery.value.trim();\n        if (query) {\n            loadImages(query);\n        }\n    }\n};\nwindow.addEventListener('scroll', loadScroll);"],"names":["axios","myApiKey","fetchImages","query","page","response","image","error","refs","renderImages","images","gallery","SimpleLightbox","isLoading","event","loadImages","iziToast","loadScroll","scrollPosition","pageHeight"],"mappings":"owBAEAA,EAAM,SAAS,QAAU,2BACzB,MAAMC,EAAW,qCAEJC,EAAc,CAACC,EAAOC,EAAO,IAC/BJ,EAAM,IAAI,GAAI,CACjB,OAAQ,CACJ,IAAKC,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,GACZ,SAAU,GACV,KAAAC,CACH,CACT,CAAK,EACI,KAAKC,GACKA,EAAS,KAAK,KAAK,IAAIC,IAAU,CACpC,OAAQA,EAAM,aACd,OAAQA,EAAM,cACd,IAAKA,EAAM,KACX,MAAOA,EAAM,MACb,MAAOA,EAAM,MACb,SAAUA,EAAM,SAChB,UAAWA,EAAM,SACpB,EAAC,CACL,EAEA,MAAMC,GAAS,CACZ,cAAQ,MAAM,qBAAsBA,CAAK,EACnCA,CAClB,CAAS,EC/BIC,EAAO,CAChB,KAAM,SAAS,cAAc,OAAO,EACpC,WAAY,SAAS,cAAc,oBAAoB,EACvD,UAAW,SAAS,cAAc,aAAa,EAC/C,QAAS,SAAS,cAAc,UAAU,CAC9C,ECFaC,EAAgBC,GAAW,CACpC,MAAMC,EAAUH,EAAK,QACrBG,EAAQ,UAAYD,EAAO,IAAIJ,GAC1B;AAAA,yCACgCA,EAAM,MAAM,gBAAgBA,EAAM,MAAM,UAAUA,EAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAUjFA,EAAM,KAAK;AAAA,mBACXA,EAAM,KAAK;AAAA,mBACXA,EAAM,QAAQ;AAAA,mBACdA,EAAM,SAAS;AAAA;AAAA;AAAA,cAIlC,EAAM,KAAK,EAAE,EAEI,IAAIM,EAAe,aAAc,CAC9C,YAAa,MACb,aAAc,GAClB,CAAC,EACQ,QAAO,CAChB,EC1BA,IAAIR,EAAO,EACPS,EAAY,GAChBL,EAAK,KAAK,iBAAiB,SAAWM,GAAU,CAC5CA,EAAM,eAAc,EACpB,MAAMX,EAAQK,EAAK,WAAW,MAAM,KAAI,EACpCL,IACAC,EAAO,EACPI,EAAK,QAAQ,UAAY,GACzBO,EAAWZ,CAAK,EAExB,CAAC,EAED,MAAMY,EAAcZ,GAAU,CACtBU,IAGJA,EAAY,GACZX,EAAYC,EAAOC,CAAI,EAClB,KAAKM,GAAU,CACRA,EAAO,SAAW,EAClBM,EAAS,KAAK,CACV,MAAO,WACP,QAAS,2EACT,WAAY,UACZ,aAAc,UACd,SAAU,WACV,gBAAiB,UACjB,SAAU,UAC9B,CAAiB,GAEDP,EAAaC,CAAM,EACnBN,GAAQ,EAExB,CAAS,EACA,MAAMG,GAAS,CACZ,QAAQ,MAAM,SAAUA,CAAK,CACzC,CAAS,EACA,QAAQ,IAAM,CACXM,EAAY,EACxB,CAAS,EACT,EACMI,EAAa,IAAM,CACrB,MAAMC,EAAiB,OAAO,QAAU,OAAO,YACzCC,EAAa,gBAAgB,aACnC,GAAID,GAAkBC,EAAa,IAAK,CACpC,MAAMhB,EAAQK,EAAK,WAAW,MAAM,KAAI,EACpCL,GACAY,EAAWZ,CAAK,CAEvB,CACL,EACA,OAAO,iBAAiB,SAAUc,CAAU"}